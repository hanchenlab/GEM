ZGS <- ZGS - XinvXTX %*% XtransZGS
ZGSR2 <- ZGS * res^2
ZGStR <- t(ZGS) %*% matrix(res, length(res), 1)
ZGStZGS <- crossprod(ZGS, ZGS)
ZGSR2tZGS <- crossprod(ZGSR2, ZGS)
S2TransS2 <- solve(ZGStZGS)
set.seed(1)
library(GMMAT)
library(bgenR) ## GitHub: duytpm16/bgenR
#pheno <- fread("../../data/sim_N10k_M100k.pheno")
Y <- pheno$cont_pheno
X <- as.matrix(pheno[,c("cov2","cov1")])
bgen <- open_bgen("../../sim_N1k_M1k.bgen")
G2 <- query_bgen()$Dosages
G2 <- query_bgen()$Dosages
close_bgen()
G2[which(is.na(G2))] <- mean(G2, na.rm = T)
nullmod <- proj_GE_lin_prepare(Y, X)
intSq1 <- 1:2
expSq <- 3
## GEM
cov <- nullmod$X
res <- nullmod$res
sigma2 <- nullmod$sigma2
XtransX <- crossprod(cov, cov)
XtransX <- solve(XtransX)
XinvXTX <- cov %*% XtransX
ZGS <- cov * G2
XtransZGS <- t(cov) %*% as.matrix(ZGS)
ZGS <- ZGS - XinvXTX %*% XtransZGS
ZGSR2 <- ZGS * res^2
ZGStR <- t(ZGS) %*% matrix(res, length(res), 1)
ZGStZGS <- crossprod(ZGS, ZGS)
ZGSR2tZGS <- crossprod(ZGSR2, ZGS)
S2TransS2 <- solve(ZGStZGS)
covmod2  <- crossprod(S2TransS2, crossprod(ZGSR2tZGS, S2TransS2))
betaM <- ZGStR[1] / ZGStZGS[1]
VarbetaM <- ZGSR2tZGS[1] / ZGStZGS[1]^2
expS2TransS2 %*% expS2DS2
rossprod(GS, nullmod$res)
crossprod(GS, nullmod$res)
crossprod(GS, nullmod$res)
## BetaInt
betaInt <- expS2TransS2 %*% expZGStR
betaInt
as.numeric(crossprod(covmod0, crossprod(GS, nullmod$res)))
betaInt2 <- S2TransS2 %*% ZGStR
betaInt2
Stemp22 = S2TransS2 %*% S2DS2
covmod
VarbetaM
VarbetaInt
covmod2
covmod
## pval main
statM <- betaM^2 / VarbetaM
pchisq(statM, 1, lower = F)
StDG = ZGSR2tZGS[expSq,1] - ZGStZGS[expSq,intSq1] %*% (solve(ZGStZGS[intSq1,intSq1]) %*% as.matrix(ZGSR2tZGS[intSq1,2]))
A = expS2TransS2  %*% StDG / ZGStZGS[1]
invA <- solve(matrix(c(VarbetaM, A, A, VarbetaInt), 2,2))
tmp <- invA %*% c(betaM, betaInt)
c(betaM, betaInt) %*% tmp
pchisq(c(betaM, betaInt) %*% tmp, 1+length(expSq), lower = F)
E
E <- 1:2
S <- nullmod$X[, E] * G2
q <- length(E)
mod <- glm(Y ~ G2 + S + X, family = family)
covmod <- if(robust) sandwich(mod)[2:(2+q), 2:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[-1]) %*% solve(covmod[-1, -1], beta[-1])), q, lower = F)
pval_joint <- pchisq(c(t(beta) %*% solve(covmod, beta)), 1+q, lower = F)
S <- X[, E] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + X, family = family)
covmod <- if(robust) sandwich(mod)[2:(2+q), 2:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[-1]) %*% solve(covmod[-1, -1], beta[-1])), q, lower = F)
pval_joint <- pchisq(c(t(beta[c(1,3)]) %*% solve(covmod[c(1,3)], beta[c(1,3)])), 1+q, lower = F)
pval_joint <- pchisq(c(t(beta[c(1,3)]) %*% solve(covmod[c(1,3), c(1,3)], beta[c(1,3)])), 1+q, lower = F)
X
S <- nullmod$X[, E] * G2
q <- length(E)
S <- nullmod$X[, E] * G2
q <- length(E)
family
robust
S <- nullmod$X[, E] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[2:(2+q), 2:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[-1]) %*% solve(covmod[-1, -1], beta[-1])), q, lower = F)
pval_joint <- pchisq(c(t(beta[c(1,3)]) %*% solve(covmod[c(1,3), c(1,3)], beta[c(1,3)])), 1+q, lower = F)
mod <- glm(y ~ G2 + X, family = family)
varmod <- if(robust) sandwich(mod)[2, 2] else vcov(mod)[2, 2]
betaG <- summary(mod)$coef[2, 1]
pval_main <- pchisq(betaG^2/varmod, 1, lower = F)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
S <- nullmod$X[, E] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[2:(2+q), 2:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[-1]) %*% solve(covmod[-1, -1], beta[-1])), q, lower = F)
pval_joint <- pchisq(c(t(beta[c(1,3)]) %*% solve(covmod[c(1,3), c(1,3)], beta[c(1,3)])), 1+q, lower = F)
mod <- glm(y ~ G2 + nullmod$X, family = family)
varmod <- if(robust) sandwich(mod)[2, 2] else vcov(mod)[2, 2]
betaG <- summary(mod)$coef[2, 1]
pval_main <- pchisq(betaG^2/varmod, 1, lower = F)
S <- nullmod$X[, c(3,2)] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[2:(2+q), 2:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[-1]) %*% solve(covmod[-1, -1], beta[-1])), q, lower = F)
pval_joint <- pchisq(c(t(beta[c(1,3)]) %*% solve(covmod[c(1,3), c(1,3)], beta[c(1,3)])), 1+q, lower = F)
S <- nullmod$X[, c(E,IC)] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[2:(2+q), 2:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[-1]) %*% solve(covmod[-1, -1], beta[-1])), q, lower = F)
robust= T
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
E <- 2
IC <- 11
IC <- 1
S <- nullmod$X[, c(E,IC)] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[2:(2+q), 2:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[-1]) %*% solve(covmod[-1, -1], beta[-1])), q, lower = F)
pval_joint <- pchisq(crossprod(beta_int[1:(1+q)], solve(covmod[1:(1+q), 1:(1+q)], beta_int[1:(1+q)])), 1+q, lower = F)
GS <- nullmod$X[, 1+c(0, E, I)] * G2
q <- length(E)
GS <- GS - nullmod$X %*% crossprod(nullmod$XX_i, crossprod(nullmod$X, GS))
varmod0 <- 1/sum(GS[,1]^2)
varmod <- if(robust) varmod0^2*sum(nullmod$res^2*GS[,1]^2) else varmod0*nullmod$sigma2
betaG <- varmod0*crossprod(GS[,1], nullmod$res)
#GS <- GS[,-1] - varmod0 * GS[,1] %*% crossprod(GS[,1], GS[,-1])
covmod0 <- solve(crossprod(GS))
covmod <- if(robust) crossprod(covmod0, crossprod(crossprod(GS*nullmod$res^2, GS), covmod0)) else covmod0*nullmod$sigma2
pval_main <- pchisq(betaG^2/varmod, 1, lower = F)
i
i
i
I
I <- 1
E <- 2
GS <- nullmod$X[, 1+c(0, E, I)] * G2
q <- length(E)
GS <- GS - nullmod$X %*% crossprod(nullmod$XX_i, crossprod(nullmod$X, GS))
varmod0 <- 1/sum(GS[,1]^2)
varmod <- if(robust) varmod0^2*sum(nullmod$res^2*GS[,1]^2) else varmod0*nullmod$sigma2
betaG <- varmod0*crossprod(GS[,1], nullmod$res)
#GS <- GS[,-1] - varmod0 * GS[,1] %*% crossprod(GS[,1], GS[,-1])
covmod0 <- solve(crossprod(GS))
covmod <- if(robust) crossprod(covmod0, crossprod(crossprod(GS*nullmod$res^2, GS), covmod0)) else covmod0*nullmod$sigma2
pval_main <- pchisq(betaG^2/varmod, 1, lower = F)
beta_int <- as.numeric(crossprod(covmod0, crossprod(GS, nullmod$res)))
stat_int <- crossprod(beta_int[2:(1+q)], solve(covmod[2:(1+q), 2:(1+q)], beta_int[2:(1+q)]))
pval_int <- pchisq(stat_int, q, lower = F)
pval_joint <- pchisq(crossprod(beta_int[1:(1+q)], solve(covmod[1:(1+q), 1:(1+q)], beta_int[1:(1+q)])), 1+q, lower = F)
head(nullmod$X)
head(X)
S <- nullmod$X[, c(E,IC)] * G2
head(S)
S <- nullmod$X[, c(E,IC)] * G2
head(S)
head(nullmod$X)
head(G2)
ic
IC
E
S <- nullmod$X[, c(E,IC)] * G2
head(S)
GS <- nullmod$X[, 1+c(0, E)] * G
GS <- nullmod$X[, 1+c(0, E, I)] * G2
I
E
head(GS)
head(nullmod$X)
head(GS)
head(G2)
S <- nullmod$X[, c(E, IC)] * G2
head(S)
dim(S)
View(S)
head(nullmod$X)
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[2:(2+q), 2:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[-1]) %*% solve(covmod[-1, -1], beta[-1])), q, lower = F)
pval_joint <- pchisq(crossprod(beta_int[1:(1+q)], solve(covmod[1:(1+q), 1:(1+q)], beta_int[1:(1+q)])), 1+q, lower = F)
E
IC
head(s)
head(S)
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[2:(2+q), 2:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
beta
pval_int <- pchisq(c(t(beta[-1]) %*% solve(covmod[-1, -1], beta[-1])), q, lower = F)
pval_joint <- pchisq(crossprod(beta_int[1:(1+q)], solve(covmod[1:(1+q), 1:(1+q)], beta_int[1:(1+q)])), 1+q, lower = F)
covmod
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
covmod
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[-1]) %*% solve(covmod[-1, -1], beta[-1])), q, lower = F)
pval_int <- pchisq(c(t(beta[-c(1:2)]) %*% solve(covmod[-c(1:2), -c(1:2)], beta[-c(1:2)])), q, lower = F)
beta
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef
beta
beta <- summary(mod)$coef[1:(2+q), 1]
beta
pval_int <- pchisq(c(t(beta[-c(1:2)]) %*% solve(covmod[-c(1:2), -c(1:2)], beta[-c(1:2)])), q, lower = F)
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
y
mod <- glm(Y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[1:(2+q), 1]
pval_int <- pchisq(c(t(beta[-c(1:2)]) %*% solve(covmod[-c(1:2), -c(1:2)], beta[-c(1:2)])), q, lower = F)
pval_joint <- pchisq(crossprod(beta_int[1:(1+q)], solve(covmod[1:(1+q), 1:(1+q)], beta_int[1:(1+q)])), 1+q, lower = F)
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
mod <- glm(Y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
covmod
GS <- nullmod$X[, 1+c(0, E, I)] * G2
q <- length(E)
GS <- GS - nullmod$X %*% crossprod(nullmod$XX_i, crossprod(nullmod$X, GS))
varmod0 <- 1/sum(GS[,1]^2)
varmod <- if(robust) varmod0^2*sum(nullmod$res^2*GS[,1]^2) else varmod0*nullmod$sigma2
betaG <- varmod0*crossprod(GS[,1], nullmod$res)
#GS <- GS[,-1] - varmod0 * GS[,1] %*% crossprod(GS[,1], GS[,-1])
covmod0 <- solve(crossprod(GS))
covmod <- if(robust) crossprod(covmod0, crossprod(crossprod(GS*nullmod$res^2, GS), covmod0)) else covmod0*nullmod$sigma2
covmod
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
mod <- glm(Y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[1:(2+q), 1]
pval_int <- pchisq(c(t(beta[-c(1:2)]) %*% solve(covmod[-c(1:2), -c(1:2)], beta[-c(1:2)])), q, lower = F)
pval_joint <- pchisq(crossprod(beta_int[1:(1+q)], solve(covmod[1:(1+q), 1:(1+q)], beta_int[1:(1+q)])), 1+q, lower = F)
mod <- glm(Y ~ G2 + nullmod$X, family = family)
varmod <- if(robust) sandwich(mod)[2, 2] else vcov(mod)[2, 2]
betaG <- summary(mod)$coef[2, 1]
pval_main <- pchisq(betaG^2/varmod, 1, lower = F)
beta
pval_joint <- pchisq(crossprod(beta_int[c(1,3)], solve(covmod[c(1,3), c(1,3)], beta_int[c(1,3)])), 1+q, lower = F)
covmod
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
mod <- glm(Y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod) else vcov(mod)[2:(2+q), 2:(2+q)]
covmod
beta <- summary(mod)$coef
beta
pval_joint <- pchisq(crossprod(beta_int[c(2,3)], solve(covmod[c(2,3), c(2,3)], beta_int[c(2,3)])), 1+q, lower = F)
beta
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
mod <- glm(Y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod) else vcov(mod)[2:(2+q), 2:(2+q)]
covmod
beta_int
pval_joint <- pchisq(crossprod(beta_int[c(1,3)], solve(covmod[c(2,3), c(2,3)], beta_int[c(1,3)])), 1+q, lower = F)
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
beta
S <- nullmod$X[, 1+c(E, IC)] * G2
q <- length(E)
mod <- glm(y ~ G2 + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
covmod
covmod <- if(robust) sandwich(mod)[2:(2+q), 2:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
beta
pval_int <- pchisq(c(t(beta[2:(2+q)]) %*% solve(covmod[2:(2+q), 2:(2+q)], beta[2:(2+q)])), q, lower = F)
covmod
pval_int <- pchisq(c(t(beta[1:(1+q)]) %*% solve(covmod[1+q:(1+q), 1:(1+q)], beta[1:(1+q)])), q, lower = F)
q
pval_int <- pchisq(c(t(beta[2:(1+q)]) %*% solve(covmod[2:(1+q), 2:(1+q)], beta[2:(1+q)])), q, lower = F)
pval_joint <- pchisq(crossprod(beta_int[1:(1+q)], solve(covmod[1:(1+q), 1:(1+q)], beta_int[1:(1+q)])), 1+q, lower = F)
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,"cov1", "cov2"]))
n  <- 1000
pheno <- data.frame(id= 1:1000, cont_pheno = rnorm(1000))
x <- sample(1:3, n, replace=T)
X <- cbind(1*(x==2), 1*(x==3), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n))
y <- 0.1*x-0.2*X[,3]+0.3*X[,3]^2+rnorm(n, sd=2)
pheno$bin_pheno <- 1*(y>mean(y))
colnames(X) <- paste0("cov", 1:10)
pheno <- cbind(pheno, X)
fwrite(pheno, file = "test.pheno", row.names = F, quote = F, sep = ",")
infile <- "../../sim_N1k_M1k.bgen"
bgen <- open_bgen(infile)
invisible(G <- do.call(cbind, lapply(1:1000, FUN = function(x) {query_bgen()$Dosages})))
invisible(close_bgen())
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,"cov1", "cov2"]))
source('C:/Users/duytp/Desktop/gem_proj.R', echo=TRUE)
source('C:/Users/duytp/Desktop/gem_proj.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,"cov1", "cov2"]))
##### 1 Exposure
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,"cov1", "cov2", drop = F]))
##### 1 Exposure
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,c("cov1", "cov2")]))
out <- apply(G, 2, function(x) proj_GE_lin1(nullmod, x, 1, 2, robust=T))
View(out)
source('C:/Users/duytp/Desktop/gem_proj.R', echo=TRUE)
##### 1 Exposure
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,c("cov1", "cov2")]))
out <- apply(G, 2, function(x) proj_GE_lin1(nullmod, x, 1, 2, robust=T))
View(out)
proj_GE_lin <- function(nullmod, G, E, IC, robust=TRUE) {
GS <- nullmod$X[, 1+c(0, E, IC)] * G
q <- length(E)
GS <- GS - nullmod$X %*% crossprod(nullmod$XX_i, crossprod(nullmod$X, GS))
varmod0 <- 1/sum(GS[,1]^2)
varmod <- if(robust) varmod0^2*sum(nullmod$res^2*GS[,1]^2) else varmod0*nullmod$sigma2
betaG <- varmod0*crossprod(GS[,1], nullmod$res)
#GS <- GS[,-1] - varmod0 * GS[,1] %*% crossprod(GS[,1], GS[,-1])
covmod0 <- solve(crossprod(GS))
covmod <- if(robust) crossprod(covmod0, crossprod(crossprod(GS*nullmod$res^2, GS), covmod0)) else covmod0*nullmod$sigma2
pval_main <- pchisq(betaG^2/varmod, 1, lower = F)
beta_int <- as.numeric(crossprod(covmod0, crossprod(GS, nullmod$res)))
stat_int <- crossprod(beta_int[2:(1+q)], solve(covmod[2:(1+q), 2:(1+q)], beta_int[2:(1+q)]))
pval_int <- pchisq(stat_int, q, lower = F)
pval_joint <- pchisq(crossprod(beta_int[1:(1+q)], solve(covmod[1:(1+q), 1:(1+q)], beta_int[1:(1+q)])), 1+q, lower = F)
return(c(pval_main, pval_int, pval_joint, betaG, beta_int[-1], varmod, c(covmod[-1,-1]), beta_int[1], c(covmod[1,])))
}
out <- apply(G, 2, function(x) proj_GE_lin1(nullmod, x, 1, 2, robust=T))
View(out)
source('C:/Users/duytp/Desktop/gem_proj.R', echo=TRUE)
source('C:/Users/duytp/Desktop/gem_proj.R', echo=TRUE)
##### 1 Exposure
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,c("cov1", "cov2")]))
n  <- 1000
pheno <- data.frame(id= 1:1000, cont_pheno = rnorm(1000))
x <- sample(1:3, n, replace=T)
X <- cbind(1*(x==2), 1*(x==3), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n))
y <- 0.1*x-0.2*X[,3]+0.3*X[,3]^2+rnorm(n, sd=2)
pheno$bin_pheno <- 1*(y>mean(y))
colnames(X) <- paste0("cov", 1:10)
pheno <- cbind(pheno, X)
fwrite(pheno, file = "test.pheno", row.names = F, quote = F, sep = ",")
infile <- "../../sim_N1k_M1k.bgen"
bgen <- open_bgen(infile)
invisible(G <- do.call(cbind, lapply(1:1000, FUN = function(x) {query_bgen()$Dosages})))
invisible(close_bgen())
##### 1 Exposure
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,c("cov1", "cov2")]))
out <- apply(G, 2, function(x) proj_GE_lin1(nullmod, x, 1, 2, robust=T))
View(out)
out2 <- apply(G, 2, function(x) reg_GE(nullmod, x, 1, 2, robust=T))
out2 <- apply(G, 2, function(x) reg_GE(pheno$cont_pheno, nullmod$X, x, 1, 2, robust=T))
reg_GE <- function(y, X, G, E, IC, robust=FALSE, family = "gaussian") {
S <- nullmod$X[, 1+c(E, IC)] * G
q <- length(E)
mod <- glm(y ~ G + S + nullmod$X, family = family)
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[2:(1+q)]) %*% solve(covmod[2:(1+q), 2:(1+q)], beta[(2:(1+q))])), q, lower = F)
pval_joint <- pchisq(crossprod(beta_int[1:(1+q)], solve(covmod[1:(1+q), 1:(1+q)], beta_int[1:(1+q)])), 1+q, lower = F)
mod <- glm(y ~ G + nullmod$X, family = family)
varmod <- if(robust) sandwich(mod)[2, 2] else vcov(mod)[2, 2]
betaG <- summary(mod)$coef[2, 1]
pval_main <- pchisq(betaG^2/varmod, 1, lower = F)
#return(c(pval_main, pval_int, pval_joint, betaG, beta[-1], varmod, c(covmod[-1, -1])))
return(c(pval_main, pval_int, pval_joint, betaG, beta[-1], varmod, c(covmod[-1, -1]), beta[1], c(covmod[1,])))
}
out2 <- apply(G, 2, function(x) reg_GE(pheno$cont_pheno, nullmod$X, x, 1, 2, robust=T))
source('C:/Users/duytp/Desktop/gem_proj.R', echo=TRUE)
out2 <- apply(G, 2, function(x) reg_GE(pheno$cont_pheno, nullmod$X, x, 1, 2, robust=T))
View(out2)
G <- G[,1]
IC <- 2
E <- 1
S <- nullmod$X[, 1+c(E, IC)] * G
q <- length(E)
mod <- glm(y ~ G + S + nullmod$X, family = family)
source('C:/Users/duytp/Desktop/gem_proj.R', echo=TRUE)
##### 1 Exposure
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,c("cov1", "cov2")]))
out <- apply(G, 2, function(x) proj_GE_lin1(nullmod, x, 1, 2, robust=T))
n  <- 1000
pheno <- data.frame(id= 1:1000, cont_pheno = rnorm(1000))
x <- sample(1:3, n, replace=T)
X <- cbind(1*(x==2), 1*(x==3), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n))
y <- 0.1*x-0.2*X[,3]+0.3*X[,3]^2+rnorm(n, sd=2)
pheno$bin_pheno <- 1*(y>mean(y))
colnames(X) <- paste0("cov", 1:10)
pheno <- cbind(pheno, X)
fwrite(pheno, file = "test.pheno", row.names = F, quote = F, sep = ",")
infile <- "../../sim_N1k_M1k.bgen"
bgen <- open_bgen(infile)
invisible(G <- do.call(cbind, lapply(1:1000, FUN = function(x) {query_bgen()$Dosages})))
invisible(close_bgen())
##### 1 Exposure
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,c("cov1", "cov2")]))
out <- apply(G, 2, function(x) proj_GE_lin1(nullmod, x, 1, 2, robust=T))
out2 <- apply(G, 2, function(x) reg_GE(pheno$cont_pheno, nullmod$X, x, 1, 2, robust=T))
G <- G[,1]
S <- X[, 1+c(E, IC)] * G
X <- nullmod$X
S <- X[, 1+c(E, IC)] * G
q <- length(E)
mod <- glm(y ~ G + S + X, family = family)
family = "gaussian"
mod <- glm(y ~ G + S + X, family = family)
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
beta
beta[2:(1+q)]
covmod
covmod
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
robust = T
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
beta
covmod
beta
pval_int <- pchisq(c(t(beta[2:(1+q)]) %*% solve(covmod[3:(2+q), 3:(2+q)], beta[(2:(1+q))])), q, lower = F)
View(out)
pval_joint <- pchisq(crossprod(beta[1:(1+q)], solve(covmod[1:(1+q), 1:(1+q)], beta[1:(1+q)])), 1+q, lower = F)
##### 1 Exposure
nullmod <- proj_GE_lin_prepare(pheno$cont_pheno, as.matrix(pheno[,c("cov1", "cov2")]))
out <- apply(G, 2, function(x) proj_GE_lin1(nullmod, x, 1, 2, robust=T))
n  <- 1000
pheno <- data.frame(id= 1:1000, cont_pheno = rnorm(1000))
x <- sample(1:3, n, replace=T)
X <- cbind(1*(x==2), 1*(x==3), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n))
y <- 0.1*x-0.2*X[,3]+0.3*X[,3]^2+rnorm(n, sd=2)
pheno$bin_pheno <- 1*(y>mean(y))
colnames(X) <- paste0("cov", 1:10)
pheno <- cbind(pheno, X)
fwrite(pheno, file = "test.pheno", row.names = F, quote = F, sep = ",")
infile <- "../../sim_N1k_M1k.bgen"
bgen <- open_bgen(infile)
invisible(G <- do.call(cbind, lapply(1:1000, FUN = function(x) {query_bgen()$Dosages})))
invisible(close_bgen())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(out[,1], out[,2])
plot(out[1,], out1[1,])
plot(out[1,], out2[1,])
plot(out[2,], out2[2,])
plot(out[3,], out2[3,])
source('C:/Users/duytp/Desktop/gem_proj.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(out[2,], out2[2,])
plot(out[1,], out2[1,])
plot(out[3,], out2[3,])
plot(out[2,], out2[2,])
plot(out[3,], out2[3,])
G <- G[,1]
X <- nullmod$X
S <- X[, 1+c(0, E, IC)] * G
q <- length(E)
mod <- glm(y ~ G + S + X, family = family)
covmod <- if(robust) sandwich(mod)[1:(2+q), 1:(2+q)] else vcov(mod)[2:(2+q), 2:(2+q)]
beta <- summary(mod)$coef[2:(2+q), 1]
pval_int <- pchisq(c(t(beta[2:(1+q)]) %*% solve(covmod[3:(2+q), 3:(2+q)], beta[(2:(1+q))])), q, lower = F)
covmod
beta
1
beta[1:(1+q)]
covmod[2:(2+q), 2:(2+q)]
beta[1:(1+q)]
source('C:/Users/duytp/Desktop/gem_proj.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
n  <- 1000
pheno <- data.frame(id= 1:1000, cont_pheno = rnorm(1000))
x <- sample(1:3, n, replace=T)
X <- cbind(1*(x==2), 1*(x==3), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n), rnorm(n))
y <- 0.1*x-0.2*X[,3]+0.3*X[,3]^2+rnorm(n, sd=2)
pheno$bin_pheno <- 1*(y>mean(y))
colnames(X) <- paste0("cov", 1:10)
pheno <- cbind(pheno, X)
fwrite(pheno, file = "test.pheno", row.names = F, quote = F, sep = ",")
infile <- "../../sim_N1k_M1k.bgen"
bgen <- open_bgen(infile)
invisible(G <- do.call(cbind, lapply(1:1000, FUN = function(x) {query_bgen()$Dosages})))
invisible(close_bgen())
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/duytp/Desktop/gem_proj.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(out2[,3])
plot(out[3,], out2[3,])
plot(out[2,], out2[2,])
